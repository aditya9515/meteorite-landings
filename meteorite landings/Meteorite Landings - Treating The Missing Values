{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1VR2INOGRgv_qe8vbNxUmubrV4YKjtdKZ","timestamp":1620383678871}]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"aMbswDYFUt_1"},"source":["# Lesson 23: Meteorite Landings - Treating The Missing Values"]},{"cell_type":"markdown","metadata":{"id":"dmruqgPqb9BH"},"source":["### Teacher-Student Activities\n","\n","In the previous class, we learnt how to slice a DataFrame by some logical conditions and also by using the Ampersand logical operator to combine two conditions as part of the data cleaning step. In this class, we will continue with the data cleaning process so that later we can make cartograms and distribution plots.\n","\n","While treating the missing values we need to keep in mind two things:\n","\n","1. Whether it is really required to replace the missing values with some new most appropriate value. In some specific problem statements, the missing values itself act as a critical value.\n","\n","2. The replaced value should not disrupt the original data otherwise, the actual results will get altered. Our logic of replacing the missing values with a new value must be consistent with the problem statement.\n","\n","Let's quickly rush through the activities we covered in the previous class and begin this class from **Activity 1: Check For The Missing Values** section.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"0btx_ehOLDK5"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"f9Nj91YqGsNf"},"source":["#### The Data\n","\n","The dataset contains the following variables:\n","\n","1. `name`: the name of the place where a meteorite was found or observed.\n","\n","2. `id`: a unique identifier for a meteorite.\n","\n","3. `nametype`: one of the following:\n","    \n","    - `valid`: a typical meteorite.\n","    \n","    - `relict`: a meteorite that has been highly degraded by the weather on Earth.\n","\n","4. `recclass`: the class of the meteorite; one of a large number of classes based on physical, chemical, and other characteristics.\n","\n","5. `mass:` the mass of the meteorite, in grams\n","\n","6. `fall`: whether the meteorite was seen falling, or was discovered after its impact; one of the following:\n","\n","    - `Fell`: the meteorite's fall was observed.\n","    \n","    - `Found`: the meteorite's fall was not observed.\n","\n","7. `year`: the year the meteorite fell, or the year it was found (depending on the value of fell).\n","\n","8. `reclat`: the latitude of the meteorite's landing.\n","\n","9. `reclong`: the longitude of the meteorite's landing.\n","\n","10. `GeoLocation`: a parentheses-enclose, comma-separated tuple that combines `reclat` and `reclong` values.\n"]},{"cell_type":"markdown","metadata":{"id":"VAwbB-dJGriU"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"DoShzic97iBl"},"source":["#### Loading The Dataset\n","\n","Dataset Link: https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/whitehat-ds-datasets/meteorite-landings/meteorite-landings.csv\n"]},{"cell_type":"code","metadata":{"id":"ThLLbqIzUd9f","colab":{"base_uri":"https://localhost:8080/","height":195},"executionInfo":{"status":"ok","timestamp":1621869560690,"user_tz":-330,"elapsed":2296,"user":{"displayName":"Kosuru Sai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgSJPl4ZU7W-l38JSU4CPkXilfQWTuYhWC2AzExfg=s64","userId":"00280760452482234609"}},"outputId":"6b35cfac-de19-45b0-e677-5ff9f944260a"},"source":["# Import the necessary libraries for this class and create a DataFrame.\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","\n","met_df = pd.read_csv('https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/whitehat-ds-datasets/meteorite-landings/meteorite-landings.csv')\n","met_df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>name</th>\n","      <th>id</th>\n","      <th>nametype</th>\n","      <th>recclass</th>\n","      <th>mass</th>\n","      <th>fall</th>\n","      <th>year</th>\n","      <th>reclat</th>\n","      <th>reclong</th>\n","      <th>GeoLocation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Aachen</td>\n","      <td>1</td>\n","      <td>Valid</td>\n","      <td>L5</td>\n","      <td>21.0</td>\n","      <td>Fell</td>\n","      <td>1880.0</td>\n","      <td>50.77500</td>\n","      <td>6.08333</td>\n","      <td>(50.775000, 6.083330)</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Aarhus</td>\n","      <td>2</td>\n","      <td>Valid</td>\n","      <td>H6</td>\n","      <td>720.0</td>\n","      <td>Fell</td>\n","      <td>1951.0</td>\n","      <td>56.18333</td>\n","      <td>10.23333</td>\n","      <td>(56.183330, 10.233330)</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Abee</td>\n","      <td>6</td>\n","      <td>Valid</td>\n","      <td>EH4</td>\n","      <td>107000.0</td>\n","      <td>Fell</td>\n","      <td>1952.0</td>\n","      <td>54.21667</td>\n","      <td>-113.00000</td>\n","      <td>(54.216670, -113.000000)</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Acapulco</td>\n","      <td>10</td>\n","      <td>Valid</td>\n","      <td>Acapulcoite</td>\n","      <td>1914.0</td>\n","      <td>Fell</td>\n","      <td>1976.0</td>\n","      <td>16.88333</td>\n","      <td>-99.90000</td>\n","      <td>(16.883330, -99.900000)</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Achiras</td>\n","      <td>370</td>\n","      <td>Valid</td>\n","      <td>L6</td>\n","      <td>780.0</td>\n","      <td>Fell</td>\n","      <td>1902.0</td>\n","      <td>-33.16667</td>\n","      <td>-64.95000</td>\n","      <td>(-33.166670, -64.950000)</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["       name   id nametype  ...    reclat    reclong               GeoLocation\n","0    Aachen    1    Valid  ...  50.77500    6.08333     (50.775000, 6.083330)\n","1    Aarhus    2    Valid  ...  56.18333   10.23333    (56.183330, 10.233330)\n","2      Abee    6    Valid  ...  54.21667 -113.00000  (54.216670, -113.000000)\n","3  Acapulco   10    Valid  ...  16.88333  -99.90000   (16.883330, -99.900000)\n","4   Achiras  370    Valid  ... -33.16667  -64.95000  (-33.166670, -64.950000)\n","\n","[5 rows x 10 columns]"]},"metadata":{"tags":[]},"execution_count":1}]},{"cell_type":"code","metadata":{"id":"ErR9tKrV7l1R","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621869560691,"user_tz":-330,"elapsed":20,"user":{"displayName":"Kosuru Sai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgSJPl4ZU7W-l38JSU4CPkXilfQWTuYhWC2AzExfg=s64","userId":"00280760452482234609"}},"outputId":"56f5d537-cb41-4d45-fb83-e8a6e78391c8"},"source":["# Find the number of rows and columns in the DataFrame.\n","met_df.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(45716, 10)"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"markdown","metadata":{"id":"ApNGI6uQ8Tfc"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"moQmsWpc7rNy"},"source":["#### The `describe()` Function\n"]},{"cell_type":"code","metadata":{"id":"BtLbRrJw6tig","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621869560692,"user_tz":-330,"elapsed":18,"user":{"displayName":"Kosuru Sai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgSJPl4ZU7W-l38JSU4CPkXilfQWTuYhWC2AzExfg=s64","userId":"00280760452482234609"}},"outputId":"88107ac3-2aa5-4ba8-c8a3-0d87aab10239"},"source":["# Descriptive statistics summary of the 'year' values in the 'met_df' DataFrame.\n","met_df['year'].describe()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["count    45428.000000\n","mean      1991.772189\n","std         27.181247\n","min        301.000000\n","25%       1987.000000\n","50%       1998.000000\n","75%       2003.000000\n","max       2501.000000\n","Name: year, dtype: float64"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"markdown","metadata":{"id":"LpqppvoTciQc"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"hOHcB-F5Qg1D"},"source":["#### Slicing A DataFrame And The Ampersand (`&`) Logical Operator\n","\n","**Syntax:** `data_frame[condition1 & condition2 & condition3 ... conditionN]`\n","\n","where `N` is the total number of conditions to be applied.\n"]},{"cell_type":"code","metadata":{"id":"sd2GEYT-PkcH","colab":{"base_uri":"https://localhost:8080/","height":402},"executionInfo":{"status":"ok","timestamp":1621869560693,"user_tz":-330,"elapsed":17,"user":{"displayName":"Kosuru Sai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgSJPl4ZU7W-l38JSU4CPkXilfQWTuYhWC2AzExfg=s64","userId":"00280760452482234609"}},"outputId":"c59eced4-8399-4971-877f-aa9648a46b51"},"source":["# Rows containing the year values less than 860 and greater than 2016.\n","correct_years_df = met_df[(met_df['year'] >= 860) & (met_df['year'] <= 2016)]\n","correct_years_df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>name</th>\n","      <th>id</th>\n","      <th>nametype</th>\n","      <th>recclass</th>\n","      <th>mass</th>\n","      <th>fall</th>\n","      <th>year</th>\n","      <th>reclat</th>\n","      <th>reclong</th>\n","      <th>GeoLocation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Aachen</td>\n","      <td>1</td>\n","      <td>Valid</td>\n","      <td>L5</td>\n","      <td>21.0</td>\n","      <td>Fell</td>\n","      <td>1880.0</td>\n","      <td>50.77500</td>\n","      <td>6.08333</td>\n","      <td>(50.775000, 6.083330)</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Aarhus</td>\n","      <td>2</td>\n","      <td>Valid</td>\n","      <td>H6</td>\n","      <td>720.0</td>\n","      <td>Fell</td>\n","      <td>1951.0</td>\n","      <td>56.18333</td>\n","      <td>10.23333</td>\n","      <td>(56.183330, 10.233330)</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Abee</td>\n","      <td>6</td>\n","      <td>Valid</td>\n","      <td>EH4</td>\n","      <td>107000.0</td>\n","      <td>Fell</td>\n","      <td>1952.0</td>\n","      <td>54.21667</td>\n","      <td>-113.00000</td>\n","      <td>(54.216670, -113.000000)</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Acapulco</td>\n","      <td>10</td>\n","      <td>Valid</td>\n","      <td>Acapulcoite</td>\n","      <td>1914.0</td>\n","      <td>Fell</td>\n","      <td>1976.0</td>\n","      <td>16.88333</td>\n","      <td>-99.90000</td>\n","      <td>(16.883330, -99.900000)</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Achiras</td>\n","      <td>370</td>\n","      <td>Valid</td>\n","      <td>L6</td>\n","      <td>780.0</td>\n","      <td>Fell</td>\n","      <td>1902.0</td>\n","      <td>-33.16667</td>\n","      <td>-64.95000</td>\n","      <td>(-33.166670, -64.950000)</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>45711</th>\n","      <td>Zillah 002</td>\n","      <td>31356</td>\n","      <td>Valid</td>\n","      <td>Eucrite</td>\n","      <td>172.0</td>\n","      <td>Found</td>\n","      <td>1990.0</td>\n","      <td>29.03700</td>\n","      <td>17.01850</td>\n","      <td>(29.037000, 17.018500)</td>\n","    </tr>\n","    <tr>\n","      <th>45712</th>\n","      <td>Zinder</td>\n","      <td>30409</td>\n","      <td>Valid</td>\n","      <td>Pallasite, ungrouped</td>\n","      <td>46.0</td>\n","      <td>Found</td>\n","      <td>1999.0</td>\n","      <td>13.78333</td>\n","      <td>8.96667</td>\n","      <td>(13.783330, 8.966670)</td>\n","    </tr>\n","    <tr>\n","      <th>45713</th>\n","      <td>Zlin</td>\n","      <td>30410</td>\n","      <td>Valid</td>\n","      <td>H4</td>\n","      <td>3.3</td>\n","      <td>Found</td>\n","      <td>1939.0</td>\n","      <td>49.25000</td>\n","      <td>17.66667</td>\n","      <td>(49.250000, 17.666670)</td>\n","    </tr>\n","    <tr>\n","      <th>45714</th>\n","      <td>Zubkovsky</td>\n","      <td>31357</td>\n","      <td>Valid</td>\n","      <td>L6</td>\n","      <td>2167.0</td>\n","      <td>Found</td>\n","      <td>2003.0</td>\n","      <td>49.78917</td>\n","      <td>41.50460</td>\n","      <td>(49.789170, 41.504600)</td>\n","    </tr>\n","    <tr>\n","      <th>45715</th>\n","      <td>Zulu Queen</td>\n","      <td>30414</td>\n","      <td>Valid</td>\n","      <td>L3.7</td>\n","      <td>200.0</td>\n","      <td>Found</td>\n","      <td>1976.0</td>\n","      <td>33.98333</td>\n","      <td>-115.68333</td>\n","      <td>(33.983330, -115.683330)</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>45424 rows × 10 columns</p>\n","</div>"],"text/plain":["             name     id  ...    reclong               GeoLocation\n","0          Aachen      1  ...    6.08333     (50.775000, 6.083330)\n","1          Aarhus      2  ...   10.23333    (56.183330, 10.233330)\n","2            Abee      6  ... -113.00000  (54.216670, -113.000000)\n","3        Acapulco     10  ...  -99.90000   (16.883330, -99.900000)\n","4         Achiras    370  ...  -64.95000  (-33.166670, -64.950000)\n","...           ...    ...  ...        ...                       ...\n","45711  Zillah 002  31356  ...   17.01850    (29.037000, 17.018500)\n","45712      Zinder  30409  ...    8.96667     (13.783330, 8.966670)\n","45713        Zlin  30410  ...   17.66667    (49.250000, 17.666670)\n","45714   Zubkovsky  31357  ...   41.50460    (49.789170, 41.504600)\n","45715  Zulu Queen  30414  ... -115.68333  (33.983330, -115.683330)\n","\n","[45424 rows x 10 columns]"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"mAHPBr8hmtGf"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"1YQ_uZiV9lT6"},"source":["#### Removing The Invalid `reclong` Values\n"]},{"cell_type":"code","metadata":{"id":"PMfE822YJWpc","colab":{"base_uri":"https://localhost:8080/","height":402},"executionInfo":{"status":"ok","timestamp":1621869560693,"user_tz":-330,"elapsed":16,"user":{"displayName":"Kosuru Sai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgSJPl4ZU7W-l38JSU4CPkXilfQWTuYhWC2AzExfg=s64","userId":"00280760452482234609"}},"outputId":"8d1706d2-a566-47d8-b7f1-c72d04117fa8"},"source":["# Rows having the 'reclong' values greater than or equal to -180 degrees and less than or equal to 180 degrees.\n","correct_long_df = correct_years_df[(correct_years_df['reclong'] >= -180) & (correct_years_df['reclong'] <= 180)]\n","correct_long_df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>name</th>\n","      <th>id</th>\n","      <th>nametype</th>\n","      <th>recclass</th>\n","      <th>mass</th>\n","      <th>fall</th>\n","      <th>year</th>\n","      <th>reclat</th>\n","      <th>reclong</th>\n","      <th>GeoLocation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Aachen</td>\n","      <td>1</td>\n","      <td>Valid</td>\n","      <td>L5</td>\n","      <td>21.0</td>\n","      <td>Fell</td>\n","      <td>1880.0</td>\n","      <td>50.77500</td>\n","      <td>6.08333</td>\n","      <td>(50.775000, 6.083330)</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Aarhus</td>\n","      <td>2</td>\n","      <td>Valid</td>\n","      <td>H6</td>\n","      <td>720.0</td>\n","      <td>Fell</td>\n","      <td>1951.0</td>\n","      <td>56.18333</td>\n","      <td>10.23333</td>\n","      <td>(56.183330, 10.233330)</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Abee</td>\n","      <td>6</td>\n","      <td>Valid</td>\n","      <td>EH4</td>\n","      <td>107000.0</td>\n","      <td>Fell</td>\n","      <td>1952.0</td>\n","      <td>54.21667</td>\n","      <td>-113.00000</td>\n","      <td>(54.216670, -113.000000)</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Acapulco</td>\n","      <td>10</td>\n","      <td>Valid</td>\n","      <td>Acapulcoite</td>\n","      <td>1914.0</td>\n","      <td>Fell</td>\n","      <td>1976.0</td>\n","      <td>16.88333</td>\n","      <td>-99.90000</td>\n","      <td>(16.883330, -99.900000)</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Achiras</td>\n","      <td>370</td>\n","      <td>Valid</td>\n","      <td>L6</td>\n","      <td>780.0</td>\n","      <td>Fell</td>\n","      <td>1902.0</td>\n","      <td>-33.16667</td>\n","      <td>-64.95000</td>\n","      <td>(-33.166670, -64.950000)</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>45711</th>\n","      <td>Zillah 002</td>\n","      <td>31356</td>\n","      <td>Valid</td>\n","      <td>Eucrite</td>\n","      <td>172.0</td>\n","      <td>Found</td>\n","      <td>1990.0</td>\n","      <td>29.03700</td>\n","      <td>17.01850</td>\n","      <td>(29.037000, 17.018500)</td>\n","    </tr>\n","    <tr>\n","      <th>45712</th>\n","      <td>Zinder</td>\n","      <td>30409</td>\n","      <td>Valid</td>\n","      <td>Pallasite, ungrouped</td>\n","      <td>46.0</td>\n","      <td>Found</td>\n","      <td>1999.0</td>\n","      <td>13.78333</td>\n","      <td>8.96667</td>\n","      <td>(13.783330, 8.966670)</td>\n","    </tr>\n","    <tr>\n","      <th>45713</th>\n","      <td>Zlin</td>\n","      <td>30410</td>\n","      <td>Valid</td>\n","      <td>H4</td>\n","      <td>3.3</td>\n","      <td>Found</td>\n","      <td>1939.0</td>\n","      <td>49.25000</td>\n","      <td>17.66667</td>\n","      <td>(49.250000, 17.666670)</td>\n","    </tr>\n","    <tr>\n","      <th>45714</th>\n","      <td>Zubkovsky</td>\n","      <td>31357</td>\n","      <td>Valid</td>\n","      <td>L6</td>\n","      <td>2167.0</td>\n","      <td>Found</td>\n","      <td>2003.0</td>\n","      <td>49.78917</td>\n","      <td>41.50460</td>\n","      <td>(49.789170, 41.504600)</td>\n","    </tr>\n","    <tr>\n","      <th>45715</th>\n","      <td>Zulu Queen</td>\n","      <td>30414</td>\n","      <td>Valid</td>\n","      <td>L3.7</td>\n","      <td>200.0</td>\n","      <td>Found</td>\n","      <td>1976.0</td>\n","      <td>33.98333</td>\n","      <td>-115.68333</td>\n","      <td>(33.983330, -115.683330)</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>38221 rows × 10 columns</p>\n","</div>"],"text/plain":["             name     id  ...    reclong               GeoLocation\n","0          Aachen      1  ...    6.08333     (50.775000, 6.083330)\n","1          Aarhus      2  ...   10.23333    (56.183330, 10.233330)\n","2            Abee      6  ... -113.00000  (54.216670, -113.000000)\n","3        Acapulco     10  ...  -99.90000   (16.883330, -99.900000)\n","4         Achiras    370  ...  -64.95000  (-33.166670, -64.950000)\n","...           ...    ...  ...        ...                       ...\n","45711  Zillah 002  31356  ...   17.01850    (29.037000, 17.018500)\n","45712      Zinder  30409  ...    8.96667     (13.783330, 8.966670)\n","45713        Zlin  30410  ...   17.66667    (49.250000, 17.666670)\n","45714   Zubkovsky  31357  ...   41.50460    (49.789170, 41.504600)\n","45715  Zulu Queen  30414  ... -115.68333  (33.983330, -115.683330)\n","\n","[38221 rows x 10 columns]"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"markdown","metadata":{"id":"RpR93HKtVC24"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"mgs3YR4dU0LV"},"source":["#### Removing The Rows Containing `0 N, 0 E` Values\n"]},{"cell_type":"code","metadata":{"id":"Vf9m-yqrKvZs","colab":{"base_uri":"https://localhost:8080/","height":402},"executionInfo":{"status":"ok","timestamp":1621869560694,"user_tz":-330,"elapsed":16,"user":{"displayName":"Kosuru Sai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgSJPl4ZU7W-l38JSU4CPkXilfQWTuYhWC2AzExfg=s64","userId":"00280760452482234609"}},"outputId":"8c6eff5c-f2f8-4af1-b3a5-7782b284f0bd"},"source":["# Rows containing the 0 'reclat' and 0 'reclong' values from the 'correct_long_df'.\n","correct_lat_long_df = correct_long_df[~((correct_long_df['reclat'] == 0 ) & (correct_long_df['reclong'] == 0))]\n","correct_lat_long_df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>name</th>\n","      <th>id</th>\n","      <th>nametype</th>\n","      <th>recclass</th>\n","      <th>mass</th>\n","      <th>fall</th>\n","      <th>year</th>\n","      <th>reclat</th>\n","      <th>reclong</th>\n","      <th>GeoLocation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Aachen</td>\n","      <td>1</td>\n","      <td>Valid</td>\n","      <td>L5</td>\n","      <td>21.0</td>\n","      <td>Fell</td>\n","      <td>1880.0</td>\n","      <td>50.77500</td>\n","      <td>6.08333</td>\n","      <td>(50.775000, 6.083330)</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Aarhus</td>\n","      <td>2</td>\n","      <td>Valid</td>\n","      <td>H6</td>\n","      <td>720.0</td>\n","      <td>Fell</td>\n","      <td>1951.0</td>\n","      <td>56.18333</td>\n","      <td>10.23333</td>\n","      <td>(56.183330, 10.233330)</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Abee</td>\n","      <td>6</td>\n","      <td>Valid</td>\n","      <td>EH4</td>\n","      <td>107000.0</td>\n","      <td>Fell</td>\n","      <td>1952.0</td>\n","      <td>54.21667</td>\n","      <td>-113.00000</td>\n","      <td>(54.216670, -113.000000)</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Acapulco</td>\n","      <td>10</td>\n","      <td>Valid</td>\n","      <td>Acapulcoite</td>\n","      <td>1914.0</td>\n","      <td>Fell</td>\n","      <td>1976.0</td>\n","      <td>16.88333</td>\n","      <td>-99.90000</td>\n","      <td>(16.883330, -99.900000)</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Achiras</td>\n","      <td>370</td>\n","      <td>Valid</td>\n","      <td>L6</td>\n","      <td>780.0</td>\n","      <td>Fell</td>\n","      <td>1902.0</td>\n","      <td>-33.16667</td>\n","      <td>-64.95000</td>\n","      <td>(-33.166670, -64.950000)</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>45711</th>\n","      <td>Zillah 002</td>\n","      <td>31356</td>\n","      <td>Valid</td>\n","      <td>Eucrite</td>\n","      <td>172.0</td>\n","      <td>Found</td>\n","      <td>1990.0</td>\n","      <td>29.03700</td>\n","      <td>17.01850</td>\n","      <td>(29.037000, 17.018500)</td>\n","    </tr>\n","    <tr>\n","      <th>45712</th>\n","      <td>Zinder</td>\n","      <td>30409</td>\n","      <td>Valid</td>\n","      <td>Pallasite, ungrouped</td>\n","      <td>46.0</td>\n","      <td>Found</td>\n","      <td>1999.0</td>\n","      <td>13.78333</td>\n","      <td>8.96667</td>\n","      <td>(13.783330, 8.966670)</td>\n","    </tr>\n","    <tr>\n","      <th>45713</th>\n","      <td>Zlin</td>\n","      <td>30410</td>\n","      <td>Valid</td>\n","      <td>H4</td>\n","      <td>3.3</td>\n","      <td>Found</td>\n","      <td>1939.0</td>\n","      <td>49.25000</td>\n","      <td>17.66667</td>\n","      <td>(49.250000, 17.666670)</td>\n","    </tr>\n","    <tr>\n","      <th>45714</th>\n","      <td>Zubkovsky</td>\n","      <td>31357</td>\n","      <td>Valid</td>\n","      <td>L6</td>\n","      <td>2167.0</td>\n","      <td>Found</td>\n","      <td>2003.0</td>\n","      <td>49.78917</td>\n","      <td>41.50460</td>\n","      <td>(49.789170, 41.504600)</td>\n","    </tr>\n","    <tr>\n","      <th>45715</th>\n","      <td>Zulu Queen</td>\n","      <td>30414</td>\n","      <td>Valid</td>\n","      <td>L3.7</td>\n","      <td>200.0</td>\n","      <td>Found</td>\n","      <td>1976.0</td>\n","      <td>33.98333</td>\n","      <td>-115.68333</td>\n","      <td>(33.983330, -115.683330)</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>32036 rows × 10 columns</p>\n","</div>"],"text/plain":["             name     id  ...    reclong               GeoLocation\n","0          Aachen      1  ...    6.08333     (50.775000, 6.083330)\n","1          Aarhus      2  ...   10.23333    (56.183330, 10.233330)\n","2            Abee      6  ... -113.00000  (54.216670, -113.000000)\n","3        Acapulco     10  ...  -99.90000   (16.883330, -99.900000)\n","4         Achiras    370  ...  -64.95000  (-33.166670, -64.950000)\n","...           ...    ...  ...        ...                       ...\n","45711  Zillah 002  31356  ...   17.01850    (29.037000, 17.018500)\n","45712      Zinder  30409  ...    8.96667     (13.783330, 8.966670)\n","45713        Zlin  30410  ...   17.66667    (49.250000, 17.666670)\n","45714   Zubkovsky  31357  ...   41.50460    (49.789170, 41.504600)\n","45715  Zulu Queen  30414  ... -115.68333  (33.983330, -115.683330)\n","\n","[32036 rows x 10 columns]"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"markdown","metadata":{"id":"984Eacm9nsDg"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"b906CNbhFTOI"},"source":["#### Activity 1: Check The Missing Values^^\n","\n","So far we have removed all the unwanted values or rows. Now it's time to check whether we have any missing values or not. The missing values are generally reported as `NaN` values. We can find the rows or columns containing the `NaN` values using either the `isnull()` or the `isna()` function. They both return `True` for the `NaN` (or null or missing) values.\n","\n","Let's first check whether any column has a missing value or not."]},{"cell_type":"code","metadata":{"id":"GsQnD29r4Axl"},"source":["# Student Action: Check whether the 'correct_lat_long_df' DataFrame has missing values or not using the 'isnull()' function.\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"lN01_memSP74"},"source":["So, there are 107 null values in the `mass` column. Let's also check for the same using the `isna()` function."]},{"cell_type":"code","metadata":{"id":"FUQlyLOTRs7I"},"source":["# Student Action: Check whether the 'correct_lat_long_df' DataFrame has missing values or not using the 'isna()' function.\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NGn1mVQGHB2G"},"source":["Again, we can see that there are 107  missing values in the `correct_lat_long_df` DataFrame. Let's retrieve all the rows containing the missing values. For this,\n","\n","- we will write the name of the variable storing the DataFrame followed by square brackets.\n","\n","    ```\n","    correct_lat_long_df[]\n","    ```\n","\n","- Inside the square brackets, we will use the `isnull()` function to get all the rows in which the `mass` value is `NaN`.\n","\n","    ```\n","    correct_lat_long_df[correct_lat_long_df['mass'].isnull() == True]\n","    ```"]},{"cell_type":"code","metadata":{"id":"an9aCkyjHNqx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621869560696,"user_tz":-330,"elapsed":15,"user":{"displayName":"Kosuru Sai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgSJPl4ZU7W-l38JSU4CPkXilfQWTuYhWC2AzExfg=s64","userId":"00280760452482234609"}},"outputId":"7f54ebdd-a6bc-4078-ba2c-e2ab14206a45"},"source":["# Student Action: Retrieve all the rows containing the missing 'mass' values in the 'correct_lat_long_df' DataFrame.\n","correct_lat_long_df.isnull().sum()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["name             0\n","id               0\n","nametype         0\n","recclass         0\n","mass           107\n","fall             0\n","year             0\n","reclat           0\n","reclong          0\n","GeoLocation      0\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"markdown","metadata":{"id":"Q2_HXASKHfdZ"},"source":["Because of the condition `correct_lat_long_df['mass'].isnull() == True`, the `correct_lat_long_df` DataFrame returns all the rows containing the `NaN` mass values.\n","\n","We are not going to remove these rows. Instead, we will replace all the `NaN` values in the `mass` column with the median mass value because most of the `mass` values lie between the first and the third quartile values. The second quartile (or median) is a fair representative of the values lying in the inter-quartile range, i.e., $(Q3 - Q1)$.\n","\n","More importantly, the quartile values remain unaffected by the unusually very high or very low values. In other words, the outliers do not affect the quartile values because they are computed by arranging all the values in the increasing order.\n","\n","Now, let's get the descriptive statistics for the `mass` column in the `correct_lat_long_df` DataFrame."]},{"cell_type":"code","metadata":{"id":"K1DHFeY64fYt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621869560696,"user_tz":-330,"elapsed":13,"user":{"displayName":"Kosuru Sai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgSJPl4ZU7W-l38JSU4CPkXilfQWTuYhWC2AzExfg=s64","userId":"00280760452482234609"}},"outputId":"a6d5b7fd-e750-4025-d71e-730abdf3794d"},"source":["# Student Action: Get descriptive statistics for the 'mass' column in the 'correct_lat_long_df' DataFrame.\n","correct_lat_long_df['mass'].describe()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["count    3.192900e+04\n","mean     1.854289e+04\n","std      6.868495e+05\n","min      0.000000e+00\n","25%      6.500000e+00\n","50%      2.960000e+01\n","75%      2.020000e+02\n","max      6.000000e+07\n","Name: mass, dtype: float64"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"markdown","metadata":{"id":"eRF9WdrfKYMH"},"source":["The median `mass` value is `29.6` grams. We will replace all `NaN` values in the `mass` column with `29.6`. After replacement, all the above rows in the `mass` column should have `29.6` value."]},{"cell_type":"markdown","metadata":{"id":"oWBoMJG7dRma"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"XofmhnqWdSQf"},"source":["#### Activity 2: The `index` Keyword\n","\n","Let's create an array containing the indices of the rows having the `NaN` values in the `mass` column. To get an array containing the row indices of a whole DataFrame, use the `index` keyword of the Pandas module."]},{"cell_type":"code","metadata":{"id":"RFnepUUrK8N3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621870649624,"user_tz":-330,"elapsed":325,"user":{"displayName":"Kosuru Sai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgSJPl4ZU7W-l38JSU4CPkXilfQWTuYhWC2AzExfg=s64","userId":"00280760452482234609"}},"outputId":"3157dbab-2143-4da3-a0bc-380c374b2205"},"source":["# Teacher Action: Create a list of the indices of above rows.\n","indices = correct_lat_long_df[correct_lat_long_df['mass'].isnull() == True].index\n","indices"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Int64Index([], dtype='int64')"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"markdown","metadata":{"id":"e2IpZD0KZSk6"},"source":["So, here we have an array containing the indices of all the rows having the `NaN` mass values. There are 107 such rows."]},{"cell_type":"markdown","metadata":{"id":"7-SmAg2cXMFR"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"MAiOGaLAWVtT"},"source":["#### Activity 3: The `loc[]` Function^\n","\n","Now, let's replace the missing `mass` values with the median of `mass` values. For this, we need to use the `loc[]` function from Pandas library. It is an extension to the `iloc[]` function. The `iloc[]` function takes only the row and column indices as inputs. But in addition to the row and column indices, the `loc[]` function also accepts the array of row indices and column indices as inputs. It also accepts the specific column names as inputs.\n","\n","Let's create a Pandas series containing all the rows having the `NaN` mass values using the `loc[]` function. We will pass `row_indices` array and `mass` column as inputs to the `loc[]` function. Let's store the series obtained in the `missing_mass_values` variable."]},{"cell_type":"code","metadata":{"id":"R483DRUUZklF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621869561025,"user_tz":-330,"elapsed":10,"user":{"displayName":"Kosuru Sai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgSJPl4ZU7W-l38JSU4CPkXilfQWTuYhWC2AzExfg=s64","userId":"00280760452482234609"}},"outputId":"5abfbc5f-0e4b-4158-a433-1369fe18aaf6"},"source":["# Student Action: Retrieve the missing 'mass' values from 'correct_lat_long_df' DataFrame using the 'loc[]' function.\n","missing_mass = correct_lat_long_df.loc[indices, 'mass']\n","missing_mass"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["12      NaN\n","38      NaN\n","76      NaN\n","93      NaN\n","172     NaN\n","         ..\n","31097   NaN\n","36812   NaN\n","38278   NaN\n","41460   NaN\n","45698   NaN\n","Name: mass, Length: 107, dtype: float64"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"markdown","metadata":{"id":"LW9U_vLv3JpT"},"source":["Here, we have a Pandas series which contains all the `NaN` mass values. The length of this series is `107`."]},{"cell_type":"markdown","metadata":{"id":"uU2h74tSLGVg"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"cnAzn9LS3cSN"},"source":["#### Activity 4: Replacing The Missing `mass` Values^^^\n","\n","Now, let's replace the missing `mass` values in the 107 rows with the median of the `mass` values. Again, we will use the `loc[]` function for this exercise.\n","\n","Using the `loc[]` function with `row_indices` and `mass` as inputs, we will get all the `NaN` values in the `mass` column. Then, using the `median()` function, we will get the median value which we are going to assign to the rows having the missing `mass` values in the `correct_lat_long_df`.\n","\n","**Note:** Python will throw some warning after running the code below. Ignore it!"]},{"cell_type":"code","metadata":{"id":"X-8brsrO4FIG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621869705075,"user_tz":-330,"elapsed":335,"user":{"displayName":"Kosuru Sai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgSJPl4ZU7W-l38JSU4CPkXilfQWTuYhWC2AzExfg=s64","userId":"00280760452482234609"}},"outputId":"e5a48b2b-ed36-46b9-9780-a7cac79fe8d2"},"source":["# Teacher Action: Replace the missing values in the 'mass' column in the 'correct_lat_long_df' DataFrame with median of mass.\n","median_of_mass =  correct_lat_long_df['mass'].median()\n","\n","correct_lat_long_df.loc[indices, 'mass'] = median_of_mass\n","median_of_mass"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  isetter(loc, value)\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["29.6"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"markdown","metadata":{"id":"7Tx7dAND4KVi"},"source":["Now, let's check whether all the missing mass values have been replaced by the median of the mass values or not. We can do this with the help of the `loc[]` function."]},{"cell_type":"code","metadata":{"id":"oY_dMNJyRRuj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621869561025,"user_tz":-330,"elapsed":7,"user":{"displayName":"Kosuru Sai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgSJPl4ZU7W-l38JSU4CPkXilfQWTuYhWC2AzExfg=s64","userId":"00280760452482234609"}},"outputId":"261efb19-ca5e-4214-bf1e-0f6c40cd5069"},"source":["# Student Action: Check whether all the missing mass values have been replaced by the median of the mass values or not.\n","correct_lat_long_df.isnull().sum()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["name           0\n","id             0\n","nametype       0\n","recclass       0\n","mass           0\n","fall           0\n","year           0\n","reclat         0\n","reclong        0\n","GeoLocation    0\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"markdown","metadata":{"id":"Glrhymd04UJY"},"source":["Each item in the `mass` column in the above DataFrame of 107 rows is `29.6` grams.\n","\n","Let's confirm it by getting the descriptive statistics for the `mass` column in the above DataFrame using the `describe()` function. Except for the `std` and `count` values, all other values should be `29.6`. The `std` value should be very very close to `0` because every value will be the same as the mean value. The `count` value should be `107`."]},{"cell_type":"code","metadata":{"id":"DT6lq4vH41fU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621869561026,"user_tz":-330,"elapsed":6,"user":{"displayName":"Kosuru Sai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgSJPl4ZU7W-l38JSU4CPkXilfQWTuYhWC2AzExfg=s64","userId":"00280760452482234609"}},"outputId":"98e8242f-290f-4162-de4f-5722f5257685"},"source":["# Student Action: Create a descriptive statistics summary of the 'mass' column in the above DataFrame containing 107 rows.\n","correct_lat_long_df['mass'].describe()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["count    3.203600e+04\n","mean     1.848105e+04\n","std      6.857023e+05\n","min      0.000000e+00\n","25%      6.500000e+00\n","50%      2.960000e+01\n","75%      2.006500e+02\n","max      6.000000e+07\n","Name: mass, dtype: float64"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"markdown","metadata":{"id":"EnadNHyB6ZbZ"},"source":["As expected, the `count` value is `107`, the `std` value is very close to `0` because $10^{-14}$ or $\\frac{1}{10^{14}}$ is practically zero.\n","\n","Now, let's get the descriptive statistics for the entire `mass` column in `correct_lat_long_df`."]},{"cell_type":"code","metadata":{"id":"b2XugN5h4tPY"},"source":["# Student Action: Create a descriptive statistics summary of the 'mass' column in the 'correct_lat_long_df' DataFrame.\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"PfsqD4NW9F4I"},"source":["As you can see there is no major change in the `std, min, 25%, 50%, 75%` and `max` values. They all are the same which is how it should be. **Treatment of the missing values should not affect the original dataset drastically.**\n","\n","In the next class, we will take a pause from the data cleaning process and learn the basics of cartograms. In the subsequent class, we will create cartograms for the meteorite landing sites on Earth."]},{"cell_type":"markdown","metadata":{"id":"2korLSyCZcW-"},"source":["---"]}]}