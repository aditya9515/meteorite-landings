{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1_1Km8g5M_r_oraXShVYciAAdQmJANy5k","timestamp":1620207732814}]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"aMbswDYFUt_1"},"source":["# Lesson 22: Meteorite Landings - DataFrame Slicing"]},{"cell_type":"markdown","metadata":{"id":"dmruqgPqb9BH"},"source":["### Teacher-Student Activities\n","\n","In the previous class, we learnt how to create a boxplot. In this class, we will continue from there. Today, we will learn how to slice a Pandas DataFrame to retrieve a specific set of rows and columns. This process is called slicing. In general, the term slicing means retrieving a specific portion of a dataset.\n","\n","Let's rush through the activities that we did in the previous class and begin this class from the **Activities 1: Slicing A DataFrame** section."]},{"cell_type":"markdown","metadata":{"id":"dWjVpY_LHOZZ"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"KOgAVZgmHEld"},"source":["#### The Data\n","\n","The dataset contains the following variables:\n","\n","1. `name`: the name of the place where a meteorite was found or observed.\n","\n","2. `id`: a unique identifier for a meteorite.\n","\n","3. `nametype`: one of the following:\n","    \n","    - `valid`: a typical meteorite.\n","    \n","    - `relict`: a meteorite that has been highly degraded by the weather on Earth.\n","\n","4. `recclass`: the class of the meteorite; one of a large number of classes based on physical, chemical, and other characteristics.\n","\n","5. `mass:` the mass of the meteorite, in grams\n","\n","6. `fall`: whether the meteorite was seen falling, or was discovered after its impact; one of the following:\n","\n","    - `Fell`: the meteorite's fall was observed.\n","    \n","    - `Found`: the meteorite's fall was not observed.\n","\n","7. `year`: the year the meteorite fell, or the year it was found (depending on the value of fell).\n","\n","8. `reclat`: the latitude of the meteorite's landing.\n","\n","9. `reclong`: the longitude of the meteorite's landing.\n","\n","10. `GeoLocation`: a parentheses-enclose, comma-separated tuple that combines reclat and reclong.\n"]},{"cell_type":"markdown","metadata":{"id":"yYNR6GP0HWyS"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"BExrazxZHVJt"},"source":["#### Notes On Missing Or Incorrect Data Points\n","\n","1. The column names such as `recclass`, `reclat`, `reclong` begin with the `rec` (denotes 'recommended') keyword. They are the recommended values of the classes, latitudes and longitudes variables for the meteorites according to the Meteoritical Society.\n","\n","2. Remove any year less than `860` or greater than `2016` from the dataset.\n","\n","3. Remove the `0N/0E` latitude and longitude entries."]},{"cell_type":"markdown","metadata":{"id":"MCci2f6OHZ1n"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"DoShzic97iBl"},"source":["#### Loading The Dataset\n","\n","Dataset Link (don't click on it):\n","\n","https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/whitehat-ds-datasets/meteorite-landings/meteorite-landings.csv\n"]},{"cell_type":"code","metadata":{"id":"ThLLbqIzUd9f","colab":{"base_uri":"https://localhost:8080/","height":202},"executionInfo":{"status":"ok","timestamp":1620228261460,"user_tz":-330,"elapsed":2961,"user":{"displayName":"Kosuru Sai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgSJPl4ZU7W-l38JSU4CPkXilfQWTuYhWC2AzExfg=s64","userId":"00280760452482234609"}},"outputId":"8602f60c-5fff-42de-8ee2-21929552cdb4"},"source":["# Import the necessary libraries for this class and create a DataFrame.\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","\n","met_df = pd.read_csv('https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/whitehat-ds-datasets/meteorite-landings/meteorite-landings.csv')\n","met_df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>name</th>\n","      <th>id</th>\n","      <th>nametype</th>\n","      <th>recclass</th>\n","      <th>mass</th>\n","      <th>fall</th>\n","      <th>year</th>\n","      <th>reclat</th>\n","      <th>reclong</th>\n","      <th>GeoLocation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Aachen</td>\n","      <td>1</td>\n","      <td>Valid</td>\n","      <td>L5</td>\n","      <td>21.0</td>\n","      <td>Fell</td>\n","      <td>1880.0</td>\n","      <td>50.77500</td>\n","      <td>6.08333</td>\n","      <td>(50.775000, 6.083330)</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Aarhus</td>\n","      <td>2</td>\n","      <td>Valid</td>\n","      <td>H6</td>\n","      <td>720.0</td>\n","      <td>Fell</td>\n","      <td>1951.0</td>\n","      <td>56.18333</td>\n","      <td>10.23333</td>\n","      <td>(56.183330, 10.233330)</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Abee</td>\n","      <td>6</td>\n","      <td>Valid</td>\n","      <td>EH4</td>\n","      <td>107000.0</td>\n","      <td>Fell</td>\n","      <td>1952.0</td>\n","      <td>54.21667</td>\n","      <td>-113.00000</td>\n","      <td>(54.216670, -113.000000)</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Acapulco</td>\n","      <td>10</td>\n","      <td>Valid</td>\n","      <td>Acapulcoite</td>\n","      <td>1914.0</td>\n","      <td>Fell</td>\n","      <td>1976.0</td>\n","      <td>16.88333</td>\n","      <td>-99.90000</td>\n","      <td>(16.883330, -99.900000)</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Achiras</td>\n","      <td>370</td>\n","      <td>Valid</td>\n","      <td>L6</td>\n","      <td>780.0</td>\n","      <td>Fell</td>\n","      <td>1902.0</td>\n","      <td>-33.16667</td>\n","      <td>-64.95000</td>\n","      <td>(-33.166670, -64.950000)</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["       name   id nametype  ...    reclat    reclong               GeoLocation\n","0    Aachen    1    Valid  ...  50.77500    6.08333     (50.775000, 6.083330)\n","1    Aarhus    2    Valid  ...  56.18333   10.23333    (56.183330, 10.233330)\n","2      Abee    6    Valid  ...  54.21667 -113.00000  (54.216670, -113.000000)\n","3  Acapulco   10    Valid  ...  16.88333  -99.90000   (16.883330, -99.900000)\n","4   Achiras  370    Valid  ... -33.16667  -64.95000  (-33.166670, -64.950000)\n","\n","[5 rows x 10 columns]"]},"metadata":{"tags":[]},"execution_count":1}]},{"cell_type":"markdown","metadata":{"id":"3vg7BI8z8Ujm"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"ik1XEt3q3reW"},"source":["#### Tuples\n"]},{"cell_type":"code","metadata":{"id":"hOQY203S7xDx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620228261462,"user_tz":-330,"elapsed":2955,"user":{"displayName":"Kosuru Sai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgSJPl4ZU7W-l38JSU4CPkXilfQWTuYhWC2AzExfg=s64","userId":"00280760452482234609"}},"outputId":"a9d63271-3ecf-4144-c886-4968c0ec686d"},"source":["# Number of rows in the 'met_df' DataFrame.\n","print(\"Number of rows =\", met_df.shape[0])\n","\n","# Number of columns in the 'met_df' DataFrame.\n","print(\"Number of columns =\", met_df.shape[1])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Number of rows = 45716\n","Number of columns = 10\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ApNGI6uQ8Tfc"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"moQmsWpc7rNy"},"source":["#### The `describe()` Function\n"]},{"cell_type":"code","metadata":{"id":"BtLbRrJw6tig","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620228261463,"user_tz":-330,"elapsed":2949,"user":{"displayName":"Kosuru Sai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgSJPl4ZU7W-l38JSU4CPkXilfQWTuYhWC2AzExfg=s64","userId":"00280760452482234609"}},"outputId":"22dbdb4a-3ce9-4c4c-f9e5-c56b0ac6d072"},"source":["# Descriptive statistics for the 'year' values in the 'met_df' DataFrame.\n","met_df['year'].describe()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["count    45428.000000\n","mean      1991.772189\n","std         27.181247\n","min        301.000000\n","25%       1987.000000\n","50%       1998.000000\n","75%       2003.000000\n","max       2501.000000\n","Name: year, dtype: float64"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"markdown","metadata":{"id":"LpqppvoTciQc"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"J7e4X3l_cjWL"},"source":["#### The Boxplot\n","\n","<img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/boxplot_description.png' width='800'>\n"]},{"cell_type":"code","metadata":{"id":"VCd9bBm_eF3C","colab":{"base_uri":"https://localhost:8080/","height":171},"executionInfo":{"status":"ok","timestamp":1620228262774,"user_tz":-330,"elapsed":4255,"user":{"displayName":"Kosuru Sai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgSJPl4ZU7W-l38JSU4CPkXilfQWTuYhWC2AzExfg=s64","userId":"00280760452482234609"}},"outputId":"b51f8eb5-8d12-4b10-eed6-2422b2f68483"},"source":["# Boxplot for the 'pd_series'.\n","import seaborn as sns # 'sns' is an alias for 'seaborn'.\n","\n","plt.figure(figsize=(20, 1))\n","sns.boxplot(met_df['year'])\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n","  FutureWarning\n"],"name":"stderr"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 1440x72 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"3qQvU1vDd643"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"EILfot9x7zAk"},"source":["#### Activity 1: Slicing A DataFrame\n","\n","Our next task is to remove all the rows having the year values greater than `2016` and lesser than `860`. To do this exercise, we will write a condition inside the square brackets after writing the variable containing the DataFrame.\n","\n","**Syntax:** `data_frame[some_condition]`\n","\n","To learn this concept, let's retrieve all the rows containing the `year` values less than or equal to `2016`.\n","\n"]},{"cell_type":"code","metadata":{"id":"q-IrUa5KL14C","colab":{"base_uri":"https://localhost:8080/","height":415},"executionInfo":{"status":"ok","timestamp":1620228262774,"user_tz":-330,"elapsed":4247,"user":{"displayName":"Kosuru Sai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgSJPl4ZU7W-l38JSU4CPkXilfQWTuYhWC2AzExfg=s64","userId":"00280760452482234609"}},"outputId":"89829400-2aa5-413d-bee1-88e2651914a4"},"source":["# Teacher Action: Retrieve all the rows from the 'met_df' DataFrame containing the year values less than or equal to 2016.\n","met_df[met_df['year'] <= 2016] #& -> ampersand - logical AND\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>name</th>\n","      <th>id</th>\n","      <th>nametype</th>\n","      <th>recclass</th>\n","      <th>mass</th>\n","      <th>fall</th>\n","      <th>year</th>\n","      <th>reclat</th>\n","      <th>reclong</th>\n","      <th>GeoLocation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Aachen</td>\n","      <td>1</td>\n","      <td>Valid</td>\n","      <td>L5</td>\n","      <td>21.0</td>\n","      <td>Fell</td>\n","      <td>1880.0</td>\n","      <td>50.77500</td>\n","      <td>6.08333</td>\n","      <td>(50.775000, 6.083330)</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Aarhus</td>\n","      <td>2</td>\n","      <td>Valid</td>\n","      <td>H6</td>\n","      <td>720.0</td>\n","      <td>Fell</td>\n","      <td>1951.0</td>\n","      <td>56.18333</td>\n","      <td>10.23333</td>\n","      <td>(56.183330, 10.233330)</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Abee</td>\n","      <td>6</td>\n","      <td>Valid</td>\n","      <td>EH4</td>\n","      <td>107000.0</td>\n","      <td>Fell</td>\n","      <td>1952.0</td>\n","      <td>54.21667</td>\n","      <td>-113.00000</td>\n","      <td>(54.216670, -113.000000)</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Acapulco</td>\n","      <td>10</td>\n","      <td>Valid</td>\n","      <td>Acapulcoite</td>\n","      <td>1914.0</td>\n","      <td>Fell</td>\n","      <td>1976.0</td>\n","      <td>16.88333</td>\n","      <td>-99.90000</td>\n","      <td>(16.883330, -99.900000)</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Achiras</td>\n","      <td>370</td>\n","      <td>Valid</td>\n","      <td>L6</td>\n","      <td>780.0</td>\n","      <td>Fell</td>\n","      <td>1902.0</td>\n","      <td>-33.16667</td>\n","      <td>-64.95000</td>\n","      <td>(-33.166670, -64.950000)</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>45711</th>\n","      <td>Zillah 002</td>\n","      <td>31356</td>\n","      <td>Valid</td>\n","      <td>Eucrite</td>\n","      <td>172.0</td>\n","      <td>Found</td>\n","      <td>1990.0</td>\n","      <td>29.03700</td>\n","      <td>17.01850</td>\n","      <td>(29.037000, 17.018500)</td>\n","    </tr>\n","    <tr>\n","      <th>45712</th>\n","      <td>Zinder</td>\n","      <td>30409</td>\n","      <td>Valid</td>\n","      <td>Pallasite, ungrouped</td>\n","      <td>46.0</td>\n","      <td>Found</td>\n","      <td>1999.0</td>\n","      <td>13.78333</td>\n","      <td>8.96667</td>\n","      <td>(13.783330, 8.966670)</td>\n","    </tr>\n","    <tr>\n","      <th>45713</th>\n","      <td>Zlin</td>\n","      <td>30410</td>\n","      <td>Valid</td>\n","      <td>H4</td>\n","      <td>3.3</td>\n","      <td>Found</td>\n","      <td>1939.0</td>\n","      <td>49.25000</td>\n","      <td>17.66667</td>\n","      <td>(49.250000, 17.666670)</td>\n","    </tr>\n","    <tr>\n","      <th>45714</th>\n","      <td>Zubkovsky</td>\n","      <td>31357</td>\n","      <td>Valid</td>\n","      <td>L6</td>\n","      <td>2167.0</td>\n","      <td>Found</td>\n","      <td>2003.0</td>\n","      <td>49.78917</td>\n","      <td>41.50460</td>\n","      <td>(49.789170, 41.504600)</td>\n","    </tr>\n","    <tr>\n","      <th>45715</th>\n","      <td>Zulu Queen</td>\n","      <td>30414</td>\n","      <td>Valid</td>\n","      <td>L3.7</td>\n","      <td>200.0</td>\n","      <td>Found</td>\n","      <td>1976.0</td>\n","      <td>33.98333</td>\n","      <td>-115.68333</td>\n","      <td>(33.983330, -115.683330)</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>45426 rows × 10 columns</p>\n","</div>"],"text/plain":["             name     id  ...    reclong               GeoLocation\n","0          Aachen      1  ...    6.08333     (50.775000, 6.083330)\n","1          Aarhus      2  ...   10.23333    (56.183330, 10.233330)\n","2            Abee      6  ... -113.00000  (54.216670, -113.000000)\n","3        Acapulco     10  ...  -99.90000   (16.883330, -99.900000)\n","4         Achiras    370  ...  -64.95000  (-33.166670, -64.950000)\n","...           ...    ...  ...        ...                       ...\n","45711  Zillah 002  31356  ...   17.01850    (29.037000, 17.018500)\n","45712      Zinder  30409  ...    8.96667     (13.783330, 8.966670)\n","45713        Zlin  30410  ...   17.66667    (49.250000, 17.666670)\n","45714   Zubkovsky  31357  ...   41.50460    (49.789170, 41.504600)\n","45715  Zulu Queen  30414  ... -115.68333  (33.983330, -115.683330)\n","\n","[45426 rows x 10 columns]"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"markdown","metadata":{"id":"AoXyI1xMMH_g"},"source":["Because of the condition `met_df['year'] <= 2016`, the `met_df` DataFrame will return only those rows in which the year values are less than or equal to `2016`.\n","\n","At the bottom of the DataFrame, you can see that there are 45,426 rows having the `year` values less than or equal to `2016`. Now, you try to retrieve all the rows having the `year` value greater than or equal to `860` using the same process."]},{"cell_type":"code","metadata":{"id":"a5KT9_EyPGh_","colab":{"base_uri":"https://localhost:8080/","height":415},"executionInfo":{"status":"ok","timestamp":1620228262775,"user_tz":-330,"elapsed":4242,"user":{"displayName":"Kosuru Sai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgSJPl4ZU7W-l38JSU4CPkXilfQWTuYhWC2AzExfg=s64","userId":"00280760452482234609"}},"outputId":"0a0a737a-0cab-44ff-9c7c-30fa45258a69"},"source":["# Student Action: Retrieve all the rows having the year values greater than or equal to 860.\n","met_df[met_df['year'] >= 860]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>name</th>\n","      <th>id</th>\n","      <th>nametype</th>\n","      <th>recclass</th>\n","      <th>mass</th>\n","      <th>fall</th>\n","      <th>year</th>\n","      <th>reclat</th>\n","      <th>reclong</th>\n","      <th>GeoLocation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Aachen</td>\n","      <td>1</td>\n","      <td>Valid</td>\n","      <td>L5</td>\n","      <td>21.0</td>\n","      <td>Fell</td>\n","      <td>1880.0</td>\n","      <td>50.77500</td>\n","      <td>6.08333</td>\n","      <td>(50.775000, 6.083330)</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Aarhus</td>\n","      <td>2</td>\n","      <td>Valid</td>\n","      <td>H6</td>\n","      <td>720.0</td>\n","      <td>Fell</td>\n","      <td>1951.0</td>\n","      <td>56.18333</td>\n","      <td>10.23333</td>\n","      <td>(56.183330, 10.233330)</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Abee</td>\n","      <td>6</td>\n","      <td>Valid</td>\n","      <td>EH4</td>\n","      <td>107000.0</td>\n","      <td>Fell</td>\n","      <td>1952.0</td>\n","      <td>54.21667</td>\n","      <td>-113.00000</td>\n","      <td>(54.216670, -113.000000)</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Acapulco</td>\n","      <td>10</td>\n","      <td>Valid</td>\n","      <td>Acapulcoite</td>\n","      <td>1914.0</td>\n","      <td>Fell</td>\n","      <td>1976.0</td>\n","      <td>16.88333</td>\n","      <td>-99.90000</td>\n","      <td>(16.883330, -99.900000)</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Achiras</td>\n","      <td>370</td>\n","      <td>Valid</td>\n","      <td>L6</td>\n","      <td>780.0</td>\n","      <td>Fell</td>\n","      <td>1902.0</td>\n","      <td>-33.16667</td>\n","      <td>-64.95000</td>\n","      <td>(-33.166670, -64.950000)</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>45711</th>\n","      <td>Zillah 002</td>\n","      <td>31356</td>\n","      <td>Valid</td>\n","      <td>Eucrite</td>\n","      <td>172.0</td>\n","      <td>Found</td>\n","      <td>1990.0</td>\n","      <td>29.03700</td>\n","      <td>17.01850</td>\n","      <td>(29.037000, 17.018500)</td>\n","    </tr>\n","    <tr>\n","      <th>45712</th>\n","      <td>Zinder</td>\n","      <td>30409</td>\n","      <td>Valid</td>\n","      <td>Pallasite, ungrouped</td>\n","      <td>46.0</td>\n","      <td>Found</td>\n","      <td>1999.0</td>\n","      <td>13.78333</td>\n","      <td>8.96667</td>\n","      <td>(13.783330, 8.966670)</td>\n","    </tr>\n","    <tr>\n","      <th>45713</th>\n","      <td>Zlin</td>\n","      <td>30410</td>\n","      <td>Valid</td>\n","      <td>H4</td>\n","      <td>3.3</td>\n","      <td>Found</td>\n","      <td>1939.0</td>\n","      <td>49.25000</td>\n","      <td>17.66667</td>\n","      <td>(49.250000, 17.666670)</td>\n","    </tr>\n","    <tr>\n","      <th>45714</th>\n","      <td>Zubkovsky</td>\n","      <td>31357</td>\n","      <td>Valid</td>\n","      <td>L6</td>\n","      <td>2167.0</td>\n","      <td>Found</td>\n","      <td>2003.0</td>\n","      <td>49.78917</td>\n","      <td>41.50460</td>\n","      <td>(49.789170, 41.504600)</td>\n","    </tr>\n","    <tr>\n","      <th>45715</th>\n","      <td>Zulu Queen</td>\n","      <td>30414</td>\n","      <td>Valid</td>\n","      <td>L3.7</td>\n","      <td>200.0</td>\n","      <td>Found</td>\n","      <td>1976.0</td>\n","      <td>33.98333</td>\n","      <td>-115.68333</td>\n","      <td>(33.983330, -115.683330)</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>45426 rows × 10 columns</p>\n","</div>"],"text/plain":["             name     id  ...    reclong               GeoLocation\n","0          Aachen      1  ...    6.08333     (50.775000, 6.083330)\n","1          Aarhus      2  ...   10.23333    (56.183330, 10.233330)\n","2            Abee      6  ... -113.00000  (54.216670, -113.000000)\n","3        Acapulco     10  ...  -99.90000   (16.883330, -99.900000)\n","4         Achiras    370  ...  -64.95000  (-33.166670, -64.950000)\n","...           ...    ...  ...        ...                       ...\n","45711  Zillah 002  31356  ...   17.01850    (29.037000, 17.018500)\n","45712      Zinder  30409  ...    8.96667     (13.783330, 8.966670)\n","45713        Zlin  30410  ...   17.66667    (49.250000, 17.666670)\n","45714   Zubkovsky  31357  ...   41.50460    (49.789170, 41.504600)\n","45715  Zulu Queen  30414  ... -115.68333  (33.983330, -115.683330)\n","\n","[45426 rows x 10 columns]"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"markdown","metadata":{"id":"bFcsCuMjPSx2"},"source":["Because of the condition `met_df['year'] >= 860`, the `met_df` DataFrame will return only those rows in which the year values are greater than or equal to `860`.\n","\n","\n","So, there are also 45,426 rows having the `year` values greater than or equal to `2016`."]},{"cell_type":"markdown","metadata":{"id":"irq3E20R63Kv"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"hOHcB-F5Qg1D"},"source":["#### Activity 2: The Ampersand (`&`) Logical Operator^^\n","\n","Now, let's retrieve all the rows having the `year` values greater than or equal to `860` and less than or equal to `2016` (i.e.,\n","$ 860 \\le \\text{year} \\le 2016$\n","). We will use the **ampersand** logical operator (denoted by the **&** symbol) to combine the above two conditions."]},{"cell_type":"code","metadata":{"id":"sd2GEYT-PkcH"},"source":["# TA: Retrieve the rows having the year values greater than or equal to 860 and less than or equal to 2016 at the same time.\n","correct_years_df = met_df[(met_df['year'] >= 860) & (met_df['year'] <= 2016)]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"I6SHEF01SN6E"},"source":["Because of the condition `(met_df['year'] >= 860) & (met_df['year'] <= 2016)`, the `met_df` DataFrame will return only those rows in which the year values are greater than or equal to `860` and less than or equal to `2016` .\n","\n","\n","So in this way, we can slice a DataFrame to get some specific rows by providing a condition in the square brackets. Now, let's find out how many rows are there in the `met_df` DataFrame having the `year` values either less than `860` or greater than `2016`."]},{"cell_type":"code","metadata":{"id":"z3E-Ov4Z1UvL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620228262777,"user_tz":-330,"elapsed":4237,"user":{"displayName":"Kosuru Sai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgSJPl4ZU7W-l38JSU4CPkXilfQWTuYhWC2AzExfg=s64","userId":"00280760452482234609"}},"outputId":"812f5de2-4469-46e7-edbc-b9ff8bed2558"},"source":["# Student Action: Compute the number of rows having the year values either less than 860 or greater than 2016 in the 'met_df' DataFrame.\n","met_df.shape[0] - correct_years_df.shape[0]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["292"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"markdown","metadata":{"id":"pGF1CpQ07etB"},"source":["So, there are 292 rows having the `year` values either less than `860` or greater than `2016` in the `met_df` DataFrame. Hence, we have obtained the DataFrame with the correct `year` values.\n","\n","Let's calculate the percentage of values we have retained in the `correct_years_df` DataFrame as compared to the `met_df` DataFrame."]},{"cell_type":"code","metadata":{"id":"Q08wPDNv8L6C","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620228262777,"user_tz":-330,"elapsed":4232,"user":{"displayName":"Kosuru Sai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgSJPl4ZU7W-l38JSU4CPkXilfQWTuYhWC2AzExfg=s64","userId":"00280760452482234609"}},"outputId":"d0aa73ce-ab2b-471f-b6de-d8062a358532"},"source":["# Student Action: Calculate the percent of values retained.\n","(correct_years_df.shape[0]/met_df.shape[0])*100"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["99.3612739522268"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"markdown","metadata":{"id":"nxi0KJTRFcHE"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"b6o1mDOuEZsA"},"source":["#### Activity 3: The `round()` Function\n","\n","The percentage value that we obtained has many digits after the decimal point. We can use the `round()` function to set the maximum number of digits to be displayed after the decimal point. It takes two inputs.\n","\n","1. The floating-point value that needs to be rounded off.\n","\n","2. The maximum number of digits to be displayed after the decimal point.\n","\n","Here's the syntax of the `round()` function.\n","\n","**Syntax:** `round(value_to_be_rounded_off, number_of_digits_to_be_displayed_after_decimal_point)`\n"]},{"cell_type":"code","metadata":{"id":"tIZnQdizFc7q","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620228262778,"user_tz":-330,"elapsed":4224,"user":{"displayName":"Kosuru Sai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgSJPl4ZU7W-l38JSU4CPkXilfQWTuYhWC2AzExfg=s64","userId":"00280760452482234609"}},"outputId":"c6561153-f17c-4060-ada7-a165217b1f4d"},"source":["# Student Action: Calculate the percent of values retained that is rounded off to two digits after the decimal point.\n","round((correct_years_df.shape[0]/met_df.shape[0])*100,4 )"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["99.3613"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"markdown","metadata":{"id":"7bQsAinD8wyL"},"source":["So, after filtering out the rows for the years before `860` and after `2016`, we still have retained 99% of the data-points. Let's also look at the descriptive statistics for the `year` column in the `correct_years_df`."]},{"cell_type":"code","metadata":{"id":"PgnpsEly7J8Y","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620228262778,"user_tz":-330,"elapsed":4216,"user":{"displayName":"Kosuru Sai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgSJPl4ZU7W-l38JSU4CPkXilfQWTuYhWC2AzExfg=s64","userId":"00280760452482234609"}},"outputId":"ce96ad7b-b51f-4d11-c078-8fdde1911875"},"source":["# Student Action: Get the descriptive statistics for the 'year' column in the 'correct_years_df'\n","correct_years_df['year'].describe()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["count    45424.000000\n","mean      1991.826413\n","std         25.047805\n","min        860.000000\n","25%       1987.000000\n","50%       1998.000000\n","75%       2003.000000\n","max       2013.000000\n","Name: year, dtype: float64"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"markdown","metadata":{"id":"fB-Ya4e19Gzp"},"source":["As you can see, the minimum value of the `year` is `860` and the maximum value is `2013`. This also confirms the filtering of the `year` values was a successful exercise.\n","\n","Let's also make a boxplot for the `year` values in the `correct_years_df` DataFrame to see the effect of the removal of the unwanted `year` values."]},{"cell_type":"code","metadata":{"id":"r82FR6n_llcd"},"source":["# Student Action: Make a boxplot for the 'year' column in the 'correct_years_df' DataFrame.\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zfgDMSirmuGv"},"source":["The box representing the interquartile range appears expanded compared to the box in the previous boxplot. It also shows the median value is close to the third quartile value. Also, there are too many lower outliers as shown by the black dots."]},{"cell_type":"markdown","metadata":{"id":"mAHPBr8hmtGf"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"1YQ_uZiV9lT6"},"source":["#### Activity 4: Removing The Invalid `reclong` Values^\n","\n","The longitude values go from\n","$-180^{\\circ}$ to $180^{\\circ}$\n","where positive values represent the eastward direction and the negative values represent the westward direction. The\n","$0^{\\circ}$\n","longitude is called the prime meridian. Refer to the image below for more details.\n","\n","<img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/britannica_longitudes.jpg' width='800'>\n","\n","*Image Credits: https://cdn.britannica.com/06/64906-050-675D6688/meridians-Facts-Lines-of-Longitude-angles-halves.jpg*\n","\n","Now, let's remove the rows containing the `reclong` values greater than\n","$180^{\\circ} $\n","and less than\n","$-180^{\\circ}$\n",". But first, let's retrieve all the rows containing the `reclong` values less than or equal to\n","$ 180^{\\circ} $"]},{"cell_type":"code","metadata":{"id":"PGSWLBI96Kko","colab":{"base_uri":"https://localhost:8080/","height":415},"executionInfo":{"status":"ok","timestamp":1620228262780,"user_tz":-330,"elapsed":4210,"user":{"displayName":"Kosuru Sai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgSJPl4ZU7W-l38JSU4CPkXilfQWTuYhWC2AzExfg=s64","userId":"00280760452482234609"}},"outputId":"c145e155-aeae-4af7-8739-73187a649b52"},"source":["# Student Action: Retrieve all the rows from the 'correct_years_df' DataFrame having the 'reclong' values less than or equal to 180 degrees.\n","correct_years_df[(correct_years_df['reclong'] <= 180)]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>name</th>\n","      <th>id</th>\n","      <th>nametype</th>\n","      <th>recclass</th>\n","      <th>mass</th>\n","      <th>fall</th>\n","      <th>year</th>\n","      <th>reclat</th>\n","      <th>reclong</th>\n","      <th>GeoLocation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Aachen</td>\n","      <td>1</td>\n","      <td>Valid</td>\n","      <td>L5</td>\n","      <td>21.0</td>\n","      <td>Fell</td>\n","      <td>1880.0</td>\n","      <td>50.77500</td>\n","      <td>6.08333</td>\n","      <td>(50.775000, 6.083330)</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Aarhus</td>\n","      <td>2</td>\n","      <td>Valid</td>\n","      <td>H6</td>\n","      <td>720.0</td>\n","      <td>Fell</td>\n","      <td>1951.0</td>\n","      <td>56.18333</td>\n","      <td>10.23333</td>\n","      <td>(56.183330, 10.233330)</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Abee</td>\n","      <td>6</td>\n","      <td>Valid</td>\n","      <td>EH4</td>\n","      <td>107000.0</td>\n","      <td>Fell</td>\n","      <td>1952.0</td>\n","      <td>54.21667</td>\n","      <td>-113.00000</td>\n","      <td>(54.216670, -113.000000)</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Acapulco</td>\n","      <td>10</td>\n","      <td>Valid</td>\n","      <td>Acapulcoite</td>\n","      <td>1914.0</td>\n","      <td>Fell</td>\n","      <td>1976.0</td>\n","      <td>16.88333</td>\n","      <td>-99.90000</td>\n","      <td>(16.883330, -99.900000)</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Achiras</td>\n","      <td>370</td>\n","      <td>Valid</td>\n","      <td>L6</td>\n","      <td>780.0</td>\n","      <td>Fell</td>\n","      <td>1902.0</td>\n","      <td>-33.16667</td>\n","      <td>-64.95000</td>\n","      <td>(-33.166670, -64.950000)</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>45711</th>\n","      <td>Zillah 002</td>\n","      <td>31356</td>\n","      <td>Valid</td>\n","      <td>Eucrite</td>\n","      <td>172.0</td>\n","      <td>Found</td>\n","      <td>1990.0</td>\n","      <td>29.03700</td>\n","      <td>17.01850</td>\n","      <td>(29.037000, 17.018500)</td>\n","    </tr>\n","    <tr>\n","      <th>45712</th>\n","      <td>Zinder</td>\n","      <td>30409</td>\n","      <td>Valid</td>\n","      <td>Pallasite, ungrouped</td>\n","      <td>46.0</td>\n","      <td>Found</td>\n","      <td>1999.0</td>\n","      <td>13.78333</td>\n","      <td>8.96667</td>\n","      <td>(13.783330, 8.966670)</td>\n","    </tr>\n","    <tr>\n","      <th>45713</th>\n","      <td>Zlin</td>\n","      <td>30410</td>\n","      <td>Valid</td>\n","      <td>H4</td>\n","      <td>3.3</td>\n","      <td>Found</td>\n","      <td>1939.0</td>\n","      <td>49.25000</td>\n","      <td>17.66667</td>\n","      <td>(49.250000, 17.666670)</td>\n","    </tr>\n","    <tr>\n","      <th>45714</th>\n","      <td>Zubkovsky</td>\n","      <td>31357</td>\n","      <td>Valid</td>\n","      <td>L6</td>\n","      <td>2167.0</td>\n","      <td>Found</td>\n","      <td>2003.0</td>\n","      <td>49.78917</td>\n","      <td>41.50460</td>\n","      <td>(49.789170, 41.504600)</td>\n","    </tr>\n","    <tr>\n","      <th>45715</th>\n","      <td>Zulu Queen</td>\n","      <td>30414</td>\n","      <td>Valid</td>\n","      <td>L3.7</td>\n","      <td>200.0</td>\n","      <td>Found</td>\n","      <td>1976.0</td>\n","      <td>33.98333</td>\n","      <td>-115.68333</td>\n","      <td>(33.983330, -115.683330)</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>38221 rows × 10 columns</p>\n","</div>"],"text/plain":["             name     id  ...    reclong               GeoLocation\n","0          Aachen      1  ...    6.08333     (50.775000, 6.083330)\n","1          Aarhus      2  ...   10.23333    (56.183330, 10.233330)\n","2            Abee      6  ... -113.00000  (54.216670, -113.000000)\n","3        Acapulco     10  ...  -99.90000   (16.883330, -99.900000)\n","4         Achiras    370  ...  -64.95000  (-33.166670, -64.950000)\n","...           ...    ...  ...        ...                       ...\n","45711  Zillah 002  31356  ...   17.01850    (29.037000, 17.018500)\n","45712      Zinder  30409  ...    8.96667     (13.783330, 8.966670)\n","45713        Zlin  30410  ...   17.66667    (49.250000, 17.666670)\n","45714   Zubkovsky  31357  ...   41.50460    (49.789170, 41.504600)\n","45715  Zulu Queen  30414  ... -115.68333  (33.983330, -115.683330)\n","\n","[38221 rows x 10 columns]"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"markdown","metadata":{"id":"09wxxPUa6njA"},"source":["So, there are 38,221 rows which have the `reclong` values less than or equal to\n","$180^{\\circ}$\n",". Now, let's retrieve all the rows which have the `reclong` values greater than or equal to\n","$-180^{\\circ}$"]},{"cell_type":"code","metadata":{"id":"HazkM7rb6-gw","colab":{"base_uri":"https://localhost:8080/","height":415},"executionInfo":{"status":"ok","timestamp":1620228262781,"user_tz":-330,"elapsed":4206,"user":{"displayName":"Kosuru Sai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgSJPl4ZU7W-l38JSU4CPkXilfQWTuYhWC2AzExfg=s64","userId":"00280760452482234609"}},"outputId":"73d4393e-3882-4bd6-d00a-be14b06c50c2"},"source":["# Student Action: Retrieve all the rows from the 'correct_years_df' DataFrame having the 'reclong' values greater than or equal to -180 degrees.\n","correct_years_df[(correct_years_df['reclong'] >= -180)]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>name</th>\n","      <th>id</th>\n","      <th>nametype</th>\n","      <th>recclass</th>\n","      <th>mass</th>\n","      <th>fall</th>\n","      <th>year</th>\n","      <th>reclat</th>\n","      <th>reclong</th>\n","      <th>GeoLocation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Aachen</td>\n","      <td>1</td>\n","      <td>Valid</td>\n","      <td>L5</td>\n","      <td>21.0</td>\n","      <td>Fell</td>\n","      <td>1880.0</td>\n","      <td>50.77500</td>\n","      <td>6.08333</td>\n","      <td>(50.775000, 6.083330)</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Aarhus</td>\n","      <td>2</td>\n","      <td>Valid</td>\n","      <td>H6</td>\n","      <td>720.0</td>\n","      <td>Fell</td>\n","      <td>1951.0</td>\n","      <td>56.18333</td>\n","      <td>10.23333</td>\n","      <td>(56.183330, 10.233330)</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Abee</td>\n","      <td>6</td>\n","      <td>Valid</td>\n","      <td>EH4</td>\n","      <td>107000.0</td>\n","      <td>Fell</td>\n","      <td>1952.0</td>\n","      <td>54.21667</td>\n","      <td>-113.00000</td>\n","      <td>(54.216670, -113.000000)</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Acapulco</td>\n","      <td>10</td>\n","      <td>Valid</td>\n","      <td>Acapulcoite</td>\n","      <td>1914.0</td>\n","      <td>Fell</td>\n","      <td>1976.0</td>\n","      <td>16.88333</td>\n","      <td>-99.90000</td>\n","      <td>(16.883330, -99.900000)</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Achiras</td>\n","      <td>370</td>\n","      <td>Valid</td>\n","      <td>L6</td>\n","      <td>780.0</td>\n","      <td>Fell</td>\n","      <td>1902.0</td>\n","      <td>-33.16667</td>\n","      <td>-64.95000</td>\n","      <td>(-33.166670, -64.950000)</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>45711</th>\n","      <td>Zillah 002</td>\n","      <td>31356</td>\n","      <td>Valid</td>\n","      <td>Eucrite</td>\n","      <td>172.0</td>\n","      <td>Found</td>\n","      <td>1990.0</td>\n","      <td>29.03700</td>\n","      <td>17.01850</td>\n","      <td>(29.037000, 17.018500)</td>\n","    </tr>\n","    <tr>\n","      <th>45712</th>\n","      <td>Zinder</td>\n","      <td>30409</td>\n","      <td>Valid</td>\n","      <td>Pallasite, ungrouped</td>\n","      <td>46.0</td>\n","      <td>Found</td>\n","      <td>1999.0</td>\n","      <td>13.78333</td>\n","      <td>8.96667</td>\n","      <td>(13.783330, 8.966670)</td>\n","    </tr>\n","    <tr>\n","      <th>45713</th>\n","      <td>Zlin</td>\n","      <td>30410</td>\n","      <td>Valid</td>\n","      <td>H4</td>\n","      <td>3.3</td>\n","      <td>Found</td>\n","      <td>1939.0</td>\n","      <td>49.25000</td>\n","      <td>17.66667</td>\n","      <td>(49.250000, 17.666670)</td>\n","    </tr>\n","    <tr>\n","      <th>45714</th>\n","      <td>Zubkovsky</td>\n","      <td>31357</td>\n","      <td>Valid</td>\n","      <td>L6</td>\n","      <td>2167.0</td>\n","      <td>Found</td>\n","      <td>2003.0</td>\n","      <td>49.78917</td>\n","      <td>41.50460</td>\n","      <td>(49.789170, 41.504600)</td>\n","    </tr>\n","    <tr>\n","      <th>45715</th>\n","      <td>Zulu Queen</td>\n","      <td>30414</td>\n","      <td>Valid</td>\n","      <td>L3.7</td>\n","      <td>200.0</td>\n","      <td>Found</td>\n","      <td>1976.0</td>\n","      <td>33.98333</td>\n","      <td>-115.68333</td>\n","      <td>(33.983330, -115.683330)</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>38222 rows × 10 columns</p>\n","</div>"],"text/plain":["             name     id  ...    reclong               GeoLocation\n","0          Aachen      1  ...    6.08333     (50.775000, 6.083330)\n","1          Aarhus      2  ...   10.23333    (56.183330, 10.233330)\n","2            Abee      6  ... -113.00000  (54.216670, -113.000000)\n","3        Acapulco     10  ...  -99.90000   (16.883330, -99.900000)\n","4         Achiras    370  ...  -64.95000  (-33.166670, -64.950000)\n","...           ...    ...  ...        ...                       ...\n","45711  Zillah 002  31356  ...   17.01850    (29.037000, 17.018500)\n","45712      Zinder  30409  ...    8.96667     (13.783330, 8.966670)\n","45713        Zlin  30410  ...   17.66667    (49.250000, 17.666670)\n","45714   Zubkovsky  31357  ...   41.50460    (49.789170, 41.504600)\n","45715  Zulu Queen  30414  ... -115.68333  (33.983330, -115.683330)\n","\n","[38222 rows x 10 columns]"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"markdown","metadata":{"id":"BD1QtXEp7OPX"},"source":["So, there are 38,222 rows which have the `reclong` values greater than or equal to\n","$180^{\\circ}$\n",". Now, let's combine both the conditions using the Ampersand (`&`) logical operator to combine the above two conditions."]},{"cell_type":"code","metadata":{"id":"PMfE822YJWpc"},"source":["# Student Action: Retrieve all the rows having the 'reclong' values greater than or equal to -180 degrees and less than or equal to 180 degrees.\n","correct_years_long_df = correct_years_df[(correct_years_df['reclong'] <= 180) & (correct_years_df['reclong'] >= -180)]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"E8TsD9TK_qWj"},"source":["So, there are 38,221 rows having the correct `reclong` values."]},{"cell_type":"markdown","metadata":{"id":"RpR93HKtVC24"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"mgs3YR4dU0LV"},"source":["#### Activity 5: Removing The Rows Containing `0 N, 0 E` Values Using The Tilde (`~`) Operator^^^\n","\n","There are also some rows which contain the `0 reclat` and `0 reclong` values. *It is also the point of intersection of the prime meridian and the Equator*. We need to remove such rows because this pair of coordinates represent the portion of the Atlantic Ocean near the west coast of Africa (refer to the image below) from where it is difficult to recover the fallen meteorites.\n","\n","<img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/zero_north_zero_east.png' width='500'>\n","\n","Let's retrieve all the rows having the `0 reclat` and `0 reclong` values."]},{"cell_type":"code","metadata":{"id":"AsaCtJGIAjue","colab":{"base_uri":"https://localhost:8080/","height":415},"executionInfo":{"status":"ok","timestamp":1620228262782,"user_tz":-330,"elapsed":4199,"user":{"displayName":"Kosuru Sai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgSJPl4ZU7W-l38JSU4CPkXilfQWTuYhWC2AzExfg=s64","userId":"00280760452482234609"}},"outputId":"a86f44c4-6644-4141-ff51-fc970d9c61bb"},"source":["# Student Action: Retrieve the rows containing the '0 reclat' and '0 reclong' values from the 'correct_long_df' DataFrame.\n","correct_years_long_df[(correct_years_long_df['reclat'] == 0) & (correct_years_long_df['reclong'] == 0)]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>name</th>\n","      <th>id</th>\n","      <th>nametype</th>\n","      <th>recclass</th>\n","      <th>mass</th>\n","      <th>fall</th>\n","      <th>year</th>\n","      <th>reclat</th>\n","      <th>reclong</th>\n","      <th>GeoLocation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>596</th>\n","      <td>Mason Gully</td>\n","      <td>53653</td>\n","      <td>Valid</td>\n","      <td>H5</td>\n","      <td>24.54</td>\n","      <td>Fell</td>\n","      <td>2010.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>(0.000000, 0.000000)</td>\n","    </tr>\n","    <tr>\n","      <th>1648</th>\n","      <td>Allan Hills 09004</td>\n","      <td>52119</td>\n","      <td>Valid</td>\n","      <td>Howardite</td>\n","      <td>221.70</td>\n","      <td>Found</td>\n","      <td>2009.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>(0.000000, 0.000000)</td>\n","    </tr>\n","    <tr>\n","      <th>1649</th>\n","      <td>Allan Hills 09005</td>\n","      <td>55797</td>\n","      <td>Valid</td>\n","      <td>L5</td>\n","      <td>122.30</td>\n","      <td>Found</td>\n","      <td>2009.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>(0.000000, 0.000000)</td>\n","    </tr>\n","    <tr>\n","      <th>1650</th>\n","      <td>Allan Hills 09006</td>\n","      <td>55798</td>\n","      <td>Valid</td>\n","      <td>H5</td>\n","      <td>104.30</td>\n","      <td>Found</td>\n","      <td>2009.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>(0.000000, 0.000000)</td>\n","    </tr>\n","    <tr>\n","      <th>1651</th>\n","      <td>Allan Hills 09008</td>\n","      <td>55799</td>\n","      <td>Valid</td>\n","      <td>H5</td>\n","      <td>31.30</td>\n","      <td>Found</td>\n","      <td>2009.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>(0.000000, 0.000000)</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>45655</th>\n","      <td>Yamato 984144</td>\n","      <td>40764</td>\n","      <td>Valid</td>\n","      <td>H6</td>\n","      <td>37.44</td>\n","      <td>Found</td>\n","      <td>1998.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>(0.000000, 0.000000)</td>\n","    </tr>\n","    <tr>\n","      <th>45656</th>\n","      <td>Yamato 984145</td>\n","      <td>40765</td>\n","      <td>Valid</td>\n","      <td>L6</td>\n","      <td>54.80</td>\n","      <td>Found</td>\n","      <td>1998.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>(0.000000, 0.000000)</td>\n","    </tr>\n","    <tr>\n","      <th>45657</th>\n","      <td>Yamato 984146</td>\n","      <td>40766</td>\n","      <td>Valid</td>\n","      <td>H3</td>\n","      <td>19.32</td>\n","      <td>Found</td>\n","      <td>1998.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>(0.000000, 0.000000)</td>\n","    </tr>\n","    <tr>\n","      <th>45658</th>\n","      <td>Yamato 984147</td>\n","      <td>40767</td>\n","      <td>Valid</td>\n","      <td>LL6</td>\n","      <td>118.90</td>\n","      <td>Found</td>\n","      <td>1998.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>(0.000000, 0.000000)</td>\n","    </tr>\n","    <tr>\n","      <th>45659</th>\n","      <td>Yamato 984148</td>\n","      <td>40768</td>\n","      <td>Valid</td>\n","      <td>L5</td>\n","      <td>4.59</td>\n","      <td>Found</td>\n","      <td>1998.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>(0.000000, 0.000000)</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>6185 rows × 10 columns</p>\n","</div>"],"text/plain":["                    name     id nametype  ... reclat  reclong           GeoLocation\n","596          Mason Gully  53653    Valid  ...    0.0      0.0  (0.000000, 0.000000)\n","1648   Allan Hills 09004  52119    Valid  ...    0.0      0.0  (0.000000, 0.000000)\n","1649   Allan Hills 09005  55797    Valid  ...    0.0      0.0  (0.000000, 0.000000)\n","1650   Allan Hills 09006  55798    Valid  ...    0.0      0.0  (0.000000, 0.000000)\n","1651   Allan Hills 09008  55799    Valid  ...    0.0      0.0  (0.000000, 0.000000)\n","...                  ...    ...      ...  ...    ...      ...                   ...\n","45655      Yamato 984144  40764    Valid  ...    0.0      0.0  (0.000000, 0.000000)\n","45656      Yamato 984145  40765    Valid  ...    0.0      0.0  (0.000000, 0.000000)\n","45657      Yamato 984146  40766    Valid  ...    0.0      0.0  (0.000000, 0.000000)\n","45658      Yamato 984147  40767    Valid  ...    0.0      0.0  (0.000000, 0.000000)\n","45659      Yamato 984148  40768    Valid  ...    0.0      0.0  (0.000000, 0.000000)\n","\n","[6185 rows x 10 columns]"]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"markdown","metadata":{"id":"8p2j5rUdZAQj"},"source":["So, there are 6,185 rows containing the `0 reclat` and `0 reclong` values in the `correct_long_df`. Let's remove them using the tilde (`~`) operator.\n","\n","The tilde operator denotes the negation of a condition. In other words, it converts the `True` value to `False` value and vice-versa."]},{"cell_type":"code","metadata":{"id":"bgZCzTLbVszt"},"source":["# Teacher Action: Get only the rows having the 'reclat' value equal to 0.\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"L5L3i0viXtE9"},"source":["So, there are 6,409 rows having the `reclat` value equal to `0` in the `correct_long_df`. Now, let's get only the rows **NOT** having the `reclat` value equal to 0 using the tilde (or negation) operator."]},{"cell_type":"code","metadata":{"id":"QqIdIDeSV1hF","colab":{"base_uri":"https://localhost:8080/","height":415},"executionInfo":{"status":"ok","timestamp":1620228262783,"user_tz":-330,"elapsed":4193,"user":{"displayName":"Kosuru Sai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgSJPl4ZU7W-l38JSU4CPkXilfQWTuYhWC2AzExfg=s64","userId":"00280760452482234609"}},"outputId":"ee3c857f-1105-4ed4-f100-e9c854d4891c"},"source":["# Teacher Action: Get only the rows NOT having the 'reclat' value equal to 0. Use the tilde operator for this operation.\n","correct_years_long_df[~(correct_years_long_df['reclat'] == 0)]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>name</th>\n","      <th>id</th>\n","      <th>nametype</th>\n","      <th>recclass</th>\n","      <th>mass</th>\n","      <th>fall</th>\n","      <th>year</th>\n","      <th>reclat</th>\n","      <th>reclong</th>\n","      <th>GeoLocation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Aachen</td>\n","      <td>1</td>\n","      <td>Valid</td>\n","      <td>L5</td>\n","      <td>21.0</td>\n","      <td>Fell</td>\n","      <td>1880.0</td>\n","      <td>50.77500</td>\n","      <td>6.08333</td>\n","      <td>(50.775000, 6.083330)</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Aarhus</td>\n","      <td>2</td>\n","      <td>Valid</td>\n","      <td>H6</td>\n","      <td>720.0</td>\n","      <td>Fell</td>\n","      <td>1951.0</td>\n","      <td>56.18333</td>\n","      <td>10.23333</td>\n","      <td>(56.183330, 10.233330)</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Abee</td>\n","      <td>6</td>\n","      <td>Valid</td>\n","      <td>EH4</td>\n","      <td>107000.0</td>\n","      <td>Fell</td>\n","      <td>1952.0</td>\n","      <td>54.21667</td>\n","      <td>-113.00000</td>\n","      <td>(54.216670, -113.000000)</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Acapulco</td>\n","      <td>10</td>\n","      <td>Valid</td>\n","      <td>Acapulcoite</td>\n","      <td>1914.0</td>\n","      <td>Fell</td>\n","      <td>1976.0</td>\n","      <td>16.88333</td>\n","      <td>-99.90000</td>\n","      <td>(16.883330, -99.900000)</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Achiras</td>\n","      <td>370</td>\n","      <td>Valid</td>\n","      <td>L6</td>\n","      <td>780.0</td>\n","      <td>Fell</td>\n","      <td>1902.0</td>\n","      <td>-33.16667</td>\n","      <td>-64.95000</td>\n","      <td>(-33.166670, -64.950000)</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>45711</th>\n","      <td>Zillah 002</td>\n","      <td>31356</td>\n","      <td>Valid</td>\n","      <td>Eucrite</td>\n","      <td>172.0</td>\n","      <td>Found</td>\n","      <td>1990.0</td>\n","      <td>29.03700</td>\n","      <td>17.01850</td>\n","      <td>(29.037000, 17.018500)</td>\n","    </tr>\n","    <tr>\n","      <th>45712</th>\n","      <td>Zinder</td>\n","      <td>30409</td>\n","      <td>Valid</td>\n","      <td>Pallasite, ungrouped</td>\n","      <td>46.0</td>\n","      <td>Found</td>\n","      <td>1999.0</td>\n","      <td>13.78333</td>\n","      <td>8.96667</td>\n","      <td>(13.783330, 8.966670)</td>\n","    </tr>\n","    <tr>\n","      <th>45713</th>\n","      <td>Zlin</td>\n","      <td>30410</td>\n","      <td>Valid</td>\n","      <td>H4</td>\n","      <td>3.3</td>\n","      <td>Found</td>\n","      <td>1939.0</td>\n","      <td>49.25000</td>\n","      <td>17.66667</td>\n","      <td>(49.250000, 17.666670)</td>\n","    </tr>\n","    <tr>\n","      <th>45714</th>\n","      <td>Zubkovsky</td>\n","      <td>31357</td>\n","      <td>Valid</td>\n","      <td>L6</td>\n","      <td>2167.0</td>\n","      <td>Found</td>\n","      <td>2003.0</td>\n","      <td>49.78917</td>\n","      <td>41.50460</td>\n","      <td>(49.789170, 41.504600)</td>\n","    </tr>\n","    <tr>\n","      <th>45715</th>\n","      <td>Zulu Queen</td>\n","      <td>30414</td>\n","      <td>Valid</td>\n","      <td>L3.7</td>\n","      <td>200.0</td>\n","      <td>Found</td>\n","      <td>1976.0</td>\n","      <td>33.98333</td>\n","      <td>-115.68333</td>\n","      <td>(33.983330, -115.683330)</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>31812 rows × 10 columns</p>\n","</div>"],"text/plain":["             name     id  ...    reclong               GeoLocation\n","0          Aachen      1  ...    6.08333     (50.775000, 6.083330)\n","1          Aarhus      2  ...   10.23333    (56.183330, 10.233330)\n","2            Abee      6  ... -113.00000  (54.216670, -113.000000)\n","3        Acapulco     10  ...  -99.90000   (16.883330, -99.900000)\n","4         Achiras    370  ...  -64.95000  (-33.166670, -64.950000)\n","...           ...    ...  ...        ...                       ...\n","45711  Zillah 002  31356  ...   17.01850    (29.037000, 17.018500)\n","45712      Zinder  30409  ...    8.96667     (13.783330, 8.966670)\n","45713        Zlin  30410  ...   17.66667    (49.250000, 17.666670)\n","45714   Zubkovsky  31357  ...   41.50460    (49.789170, 41.504600)\n","45715  Zulu Queen  30414  ... -115.68333  (33.983330, -115.683330)\n","\n","[31812 rows x 10 columns]"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"markdown","metadata":{"id":"IQCTAkk5YDV2"},"source":["So, there are 31,812 rows in the `correct_long_df` **NOT** having the `reclat` value equal to `0`. Now, let's get the rows **neither** having the `reclat` value equal to 0 **nor** having the `reclong` value equal to `0` using the tilde (or negation) operator. Store the new DataFrame in the `correct_lat_long_df` variable.\n","\n","We already know that there are 6,185 rows having both the `reclat` and `reclong` values equal to `0` in the `correct_long_df`. So, after removing these rows, we should have a total of (38,221 - 6,185 = 32,036) rows in the new DataFrame."]},{"cell_type":"code","metadata":{"id":"Vf9m-yqrKvZs"},"source":["# Teacher Action: Remove the rows containing the 0 'reclat' and 0 'reclong' values from the 'correct_long_df'.\n","correct_lat_long_df = correct_years_long_df[~((correct_years_long_df['reclat'] == 0) & (correct_years_long_df['reclong'] == 0))]\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"CcmlmbDqavJN"},"source":["As you can see, after the removal of the rows containing the unwanted `reclat` and `reclong` values, we have a new DataFrame containing 32,036 rows.\n","\n","Let's check the percentage of values we have retained so far."]},{"cell_type":"code","metadata":{"id":"zvuGRAjlkQmW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620228262784,"user_tz":-330,"elapsed":4185,"user":{"displayName":"Kosuru Sai","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgSJPl4ZU7W-l38JSU4CPkXilfQWTuYhWC2AzExfg=s64","userId":"00280760452482234609"}},"outputId":"432c31ae-6110-40ca-a840-fcdd4bb9da20"},"source":["# Student Action: Calculate the percentage of values retained in the new DataFrame from the 'met_df' DataFrame.\n","# Also, round-off the value to two digits after the decimal point.\n","round(correct_lat_long_df.shape[0] * 100 / met_df.shape[0], 2)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["70.08"]},"metadata":{"tags":[]},"execution_count":20}]},{"cell_type":"markdown","metadata":{"id":"YAAUo8KnkiMu"},"source":["So far we have retained the approx 70% of the values which is still quite a big dataset.\n","\n","In the next class, we will learn about logical operations more so that you get comfortable with this concept because a large part of the data cleaning process involves applying the relevant logical operations. Afterwards, we will continue with data cleaning exercises."]},{"cell_type":"markdown","metadata":{"id":"984Eacm9nsDg"},"source":["---"]}]}